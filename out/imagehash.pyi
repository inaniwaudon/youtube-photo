from typing import Any

class ImageHash:
    hash: Any
    def __init__(self, binary_array) -> None: ...
    def __sub__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __len__(self): ...

def hex_to_hash(hexstr): ...
def hex_to_flathash(hexstr, hashsize): ...
def old_hex_to_hash(hexstr, hash_size: int = ...): ...
def average_hash(image, hash_size: int = ..., mean=...): ...
def phash(image, hash_size: int = ..., highfreq_factor: int = ...): ...
def phash_simple(image, hash_size: int = ..., highfreq_factor: int = ...): ...
def dhash(image, hash_size: int = ...): ...
def dhash_vertical(image, hash_size: int = ...): ...
def whash(image, hash_size: int = ..., image_scale: Any | None = ..., mode: str = ..., remove_max_haar_ll: bool = ...): ...
def colorhash(image, binbits: int = ...): ...

class ImageMultiHash:
    segment_hashes: Any
    def __init__(self, hashes) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __sub__(self, other, hamming_cutoff: Any | None = ..., bit_error_rate: Any | None = ...): ...
    def __hash__(self): ...
    def hash_diff(self, other_hash, hamming_cutoff: Any | None = ..., bit_error_rate: Any | None = ...): ...
    def matches(self, other_hash, region_cutoff: int = ..., hamming_cutoff: Any | None = ..., bit_error_rate: Any | None = ...): ...
    def best_match(self, other_hashes, hamming_cutoff: Any | None = ..., bit_error_rate: Any | None = ...): ...

def crop_resistant_hash(image, hash_func: Any | None = ..., limit_segments: Any | None = ..., segment_threshold: int = ..., min_segment_size: int = ..., segmentation_image_size: int = ...): ...
