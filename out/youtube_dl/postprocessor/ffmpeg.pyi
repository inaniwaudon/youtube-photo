from ..utils import ISO639Utils as ISO639Utils, PostProcessingError as PostProcessingError, dfxp2srt as dfxp2srt, encodeArgument as encodeArgument, encodeFilename as encodeFilename, get_exe_version as get_exe_version, is_outdated_version as is_outdated_version, prepend_extension as prepend_extension, replace_extension as replace_extension, shell_quote as shell_quote, subtitles_filename as subtitles_filename
from .common import AudioConversionError as AudioConversionError, PostProcessor as PostProcessor
from typing import Any

EXT_TO_OUT_FORMATS: Any
ACODECS: Any

class FFmpegPostProcessorError(PostProcessingError): ...

class FFmpegPostProcessor(PostProcessor):
    def __init__(self, downloader: Any | None = ...) -> None: ...
    def check_version(self) -> None: ...
    @staticmethod
    def get_versions(downloader: Any | None = ...): ...
    @property
    def available(self): ...
    @property
    def executable(self): ...
    @property
    def probe_available(self): ...
    @property
    def probe_executable(self): ...
    def get_audio_codec(self, path): ...
    def run_ffmpeg_multiple_files(self, input_paths, out_path, opts) -> None: ...
    def run_ffmpeg(self, path, out_path, opts) -> None: ...

class FFmpegExtractAudioPP(FFmpegPostProcessor):
    def __init__(self, downloader: Any | None = ..., preferredcodec: Any | None = ..., preferredquality: Any | None = ..., nopostoverwrites: bool = ...) -> None: ...
    def run_ffmpeg(self, path, out_path, codec, more_opts) -> None: ...
    def run(self, information): ...

class FFmpegVideoConvertorPP(FFmpegPostProcessor):
    def __init__(self, downloader: Any | None = ..., preferedformat: Any | None = ...) -> None: ...
    def run(self, information): ...

class FFmpegEmbedSubtitlePP(FFmpegPostProcessor):
    def run(self, information): ...

class FFmpegMetadataPP(FFmpegPostProcessor):
    def run(self, info): ...

class FFmpegMergerPP(FFmpegPostProcessor):
    def run(self, info): ...
    def can_merge(self): ...

class FFmpegFixupStretchedPP(FFmpegPostProcessor):
    def run(self, info): ...

class FFmpegFixupM4aPP(FFmpegPostProcessor):
    def run(self, info): ...

class FFmpegFixupM3u8PP(FFmpegPostProcessor):
    def run(self, info): ...

class FFmpegSubtitlesConvertorPP(FFmpegPostProcessor):
    format: Any
    def __init__(self, downloader: Any | None = ..., format: Any | None = ...) -> None: ...
    def run(self, info): ...
