from ..compat import compat_os_name as compat_os_name
from ..utils import decodeArgument as decodeArgument, encodeFilename as encodeFilename, error_to_compat_str as error_to_compat_str, format_bytes as format_bytes, shell_quote as shell_quote, timeconvert as timeconvert
from typing import Any

class FileDownloader:
    params: Any
    ydl: Any
    def __init__(self, ydl, params) -> None: ...
    @staticmethod
    def format_seconds(seconds): ...
    @staticmethod
    def calc_percent(byte_counter, data_len): ...
    @staticmethod
    def format_percent(percent): ...
    @staticmethod
    def calc_eta(start, now, total, current): ...
    @staticmethod
    def format_eta(eta): ...
    @staticmethod
    def calc_speed(start, now, bytes): ...
    @staticmethod
    def format_speed(speed): ...
    @staticmethod
    def format_retries(retries): ...
    @staticmethod
    def best_block_size(elapsed_time, bytes): ...
    @staticmethod
    def parse_bytes(bytestr): ...
    def to_screen(self, *args, **kargs) -> None: ...
    def to_stderr(self, message) -> None: ...
    def to_console_title(self, message) -> None: ...
    def trouble(self, *args, **kargs) -> None: ...
    def report_warning(self, *args, **kargs) -> None: ...
    def report_error(self, *args, **kargs) -> None: ...
    def slow_down(self, start_time, now, byte_counter) -> None: ...
    def temp_name(self, filename): ...
    def undo_temp_name(self, filename): ...
    def ytdl_filename(self, filename): ...
    def try_rename(self, old_filename, new_filename) -> None: ...
    def try_utime(self, filename, last_modified_hdr): ...
    def report_destination(self, filename) -> None: ...
    def report_progress(self, s) -> None: ...
    def report_resuming_byte(self, resume_len) -> None: ...
    def report_retry(self, err, count, retries) -> None: ...
    def report_file_already_downloaded(self, file_name) -> None: ...
    def report_unable_to_resume(self) -> None: ...
    def download(self, filename, info_dict): ...
    def real_download(self, filename, info_dict) -> None: ...
    def add_progress_hook(self, ph) -> None: ...
