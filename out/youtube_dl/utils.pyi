from .compat import compat_HTMLParseError as compat_HTMLParseError, compat_HTMLParser as compat_HTMLParser, compat_HTTPError as compat_HTTPError, compat_basestring as compat_basestring, compat_chr as compat_chr, compat_cookiejar as compat_cookiejar, compat_ctypes_WINFUNCTYPE as compat_ctypes_WINFUNCTYPE, compat_etree_fromstring as compat_etree_fromstring, compat_expanduser as compat_expanduser, compat_html_entities as compat_html_entities, compat_html_entities_html5 as compat_html_entities_html5, compat_http_client as compat_http_client, compat_integer_types as compat_integer_types, compat_kwargs as compat_kwargs, compat_os_name as compat_os_name, compat_parse_qs as compat_parse_qs, compat_shlex_quote as compat_shlex_quote, compat_str as compat_str, compat_struct_pack as compat_struct_pack, compat_struct_unpack as compat_struct_unpack, compat_urllib_error as compat_urllib_error, compat_urllib_parse as compat_urllib_parse, compat_urllib_parse_unquote_plus as compat_urllib_parse_unquote_plus, compat_urllib_parse_urlencode as compat_urllib_parse_urlencode, compat_urllib_parse_urlparse as compat_urllib_parse_urlparse, compat_urllib_request as compat_urllib_request, compat_urlparse as compat_urlparse, compat_xpath as compat_xpath
from .socks import ProxyType as ProxyType, sockssocket as sockssocket
from typing import Any, NamedTuple

def register_socks_protocols() -> None: ...

compiled_regex_type: Any

def random_user_agent(): ...

std_headers: Any
USER_AGENTS: Any
NO_DEFAULT: Any
ENGLISH_MONTH_NAMES: Any
MONTH_NAMES: Any
KNOWN_EXTENSIONS: Any
ACCENT_CHARS: Any
DATE_FORMATS: Any
DATE_FORMATS_DAY_FIRST: Any
DATE_FORMATS_MONTH_FIRST: Any
PACKED_CODES_RE: str
JSON_LD_RE: str

def preferredencoding(): ...
def write_json_file(obj, fn): ...
def find_xpath_attr(node, xpath, key, val: Any | None = ...): ...
def xpath_with_ns(path, ns_map): ...
def xpath_element(node, xpath, name: Any | None = ..., fatal: bool = ..., default=...): ...
def xpath_text(node, xpath, name: Any | None = ..., fatal: bool = ..., default=...): ...
def xpath_attr(node, xpath, key, name: Any | None = ..., fatal: bool = ..., default=...): ...
def get_element_by_id(id, html): ...
def get_element_by_class(class_name, html): ...
def get_element_by_attribute(attribute, value, html, escape_value: bool = ...): ...
def get_elements_by_class(class_name, html): ...
def get_elements_by_attribute(attribute, value, html, escape_value: bool = ...): ...

class HTMLAttributeParser(compat_HTMLParser):
    attrs: Any
    def __init__(self) -> None: ...
    def handle_starttag(self, tag, attrs) -> None: ...

def extract_attributes(html_element): ...
def clean_html(html): ...
def sanitize_open(filename, open_mode): ...
def timeconvert(timestr): ...
def sanitize_filename(s, restricted: bool = ..., is_id: bool = ...): ...
def sanitize_path(s): ...
def sanitize_url(url): ...
def sanitized_Request(url, *args, **kwargs): ...
def expand_path(s): ...
def orderedSet(iterable): ...
def unescapeHTML(s): ...
def get_subprocess_encoding(): ...
def encodeFilename(s, for_subprocess: bool = ...): ...
def decodeFilename(b, for_subprocess: bool = ...): ...
def encodeArgument(s): ...
def decodeArgument(b): ...
def decodeOption(optval): ...
def formatSeconds(secs): ...
def make_HTTPS_handler(params, **kwargs): ...
def bug_reports_message(): ...

class YoutubeDLError(Exception): ...

class ExtractorError(YoutubeDLError):
    traceback: Any
    exc_info: Any
    cause: Any
    video_id: Any
    def __init__(self, msg, tb: Any | None = ..., expected: bool = ..., cause: Any | None = ..., video_id: Any | None = ...) -> None: ...
    def format_traceback(self): ...

class UnsupportedError(ExtractorError):
    url: Any
    def __init__(self, url) -> None: ...

class RegexNotFoundError(ExtractorError): ...

class GeoRestrictedError(ExtractorError):
    msg: Any
    countries: Any
    def __init__(self, msg, countries: Any | None = ...) -> None: ...

class DownloadError(YoutubeDLError):
    exc_info: Any
    def __init__(self, msg, exc_info: Any | None = ...) -> None: ...

class SameFileError(YoutubeDLError): ...

class PostProcessingError(YoutubeDLError):
    msg: Any
    def __init__(self, msg) -> None: ...

class MaxDownloadsReached(YoutubeDLError): ...
class UnavailableVideoError(YoutubeDLError): ...

class ContentTooShortError(YoutubeDLError):
    downloaded: Any
    expected: Any
    def __init__(self, downloaded, expected) -> None: ...

class XAttrMetadataError(YoutubeDLError):
    code: Any
    msg: Any
    reason: str
    def __init__(self, code: Any | None = ..., msg: str = ...) -> None: ...

class XAttrUnavailableError(YoutubeDLError): ...

def handle_youtubedl_headers(headers): ...

class YoutubeDLHandler(compat_urllib_request.HTTPHandler):
    def __init__(self, params, *args, **kwargs) -> None: ...
    def http_open(self, req): ...
    @staticmethod
    def deflate(data): ...
    def http_request(self, req): ...
    def http_response(self, req, resp): ...
    https_request: Any
    https_response: Any

def make_socks_conn_class(base_class, socks_proxy): ...

class YoutubeDLHTTPSHandler(compat_urllib_request.HTTPSHandler):
    def __init__(self, params, https_conn_class: Any | None = ..., *args, **kwargs) -> None: ...
    def https_open(self, req): ...

class YoutubeDLCookieJar(compat_cookiejar.MozillaCookieJar):

    class _CookieFileEntry(NamedTuple):
        domain_name: Any
        include_subdomains: Any
        path: Any
        https_only: Any
        expires_at: Any
        name: Any
        value: Any
    def save(self, filename: Any | None = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...
    def load(self, filename: Any | None = ..., ignore_discard: bool = ..., ignore_expires: bool = ...): ...

class YoutubeDLCookieProcessor(compat_urllib_request.HTTPCookieProcessor):
    def __init__(self, cookiejar: Any | None = ...) -> None: ...
    def http_response(self, request, response): ...
    https_request: Any
    https_response: Any

class YoutubeDLRedirectHandler(compat_urllib_request.HTTPRedirectHandler):
    http_error_301: Any
    http_error_303: Any
    http_error_307: Any
    http_error_308: Any
    def redirect_request(self, req, fp, code, msg, headers, newurl): ...

def extract_timezone(date_str): ...
def parse_iso8601(date_str, delimiter: str = ..., timezone: Any | None = ...): ...
def date_formats(day_first: bool = ...): ...
def unified_strdate(date_str, day_first: bool = ...): ...
def unified_timestamp(date_str, day_first: bool = ...): ...
def determine_ext(url, default_ext: str = ...): ...
def subtitles_filename(filename, sub_lang, sub_format, expected_real_ext: Any | None = ...): ...
def date_from_str(date_str): ...
def hyphenate_date(date_str): ...

class DateRange:
    start: Any
    end: Any
    def __init__(self, start: Any | None = ..., end: Any | None = ...) -> None: ...
    @classmethod
    def day(cls, day): ...
    def __contains__(self, date): ...

def platform_name(): ...
def write_string(s, out: Any | None = ..., encoding: Any | None = ...) -> None: ...
def bytes_to_intlist(bs): ...
def intlist_to_bytes(xs): ...

UNSUPPORTED_MSG: str

class locked_file:
    f: Any
    mode: Any
    def __init__(self, filename, mode, encoding: Any | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, etype, value, traceback) -> None: ...
    def __iter__(self): ...
    def write(self, *args): ...
    def read(self, *args): ...

def get_filesystem_encoding(): ...
def shell_quote(args): ...
def smuggle_url(url, data): ...
def unsmuggle_url(smug_url, default: Any | None = ...): ...
def format_bytes(bytes): ...
def lookup_unit_table(unit_table, s): ...
def parse_filesize(s): ...
def parse_count(s): ...
def parse_resolution(s): ...
def parse_bitrate(s): ...
def month_by_name(name, lang: str = ...): ...
def month_by_abbreviation(abbrev): ...
def fix_xml_ampersands(xml_str): ...
def setproctitle(title) -> None: ...
def remove_start(s, start): ...
def remove_end(s, end): ...
def remove_quotes(s): ...
def url_basename(url): ...
def base_url(url): ...
def urljoin(base, path): ...

class HEADRequest(compat_urllib_request.Request):
    def get_method(self): ...

class PUTRequest(compat_urllib_request.Request):
    def get_method(self): ...

def int_or_none(v, scale: int = ..., default: Any | None = ..., get_attr: Any | None = ..., invscale: int = ...): ...
def str_or_none(v, default: Any | None = ...): ...
def str_to_int(int_str): ...
def float_or_none(v, scale: int = ..., invscale: int = ..., default: Any | None = ...): ...
def bool_or_none(v, default: Any | None = ...): ...
def strip_or_none(v, default: Any | None = ...): ...
def url_or_none(url): ...
def parse_duration(s): ...
def prepend_extension(filename, ext, expected_real_ext: Any | None = ...): ...
def replace_extension(filename, ext, expected_real_ext: Any | None = ...): ...
def check_executable(exe, args=...): ...
def get_exe_version(exe, args=..., version_re: Any | None = ..., unrecognized: str = ...): ...
def detect_exe_version(output, version_re: Any | None = ..., unrecognized: str = ...): ...

class PagedList:
    def __len__(self): ...

class OnDemandPagedList(PagedList):
    def __init__(self, pagefunc, pagesize, use_cache: bool = ...) -> None: ...
    def getslice(self, start: int = ..., end: Any | None = ...): ...

class InAdvancePagedList(PagedList):
    def __init__(self, pagefunc, pagecount, pagesize) -> None: ...
    def getslice(self, start: int = ..., end: Any | None = ...): ...

def uppercase_escape(s): ...
def lowercase_escape(s): ...
def escape_rfc3986(s): ...
def escape_url(url): ...
def read_batch_urls(batch_fd): ...
def urlencode_postdata(*args, **kargs): ...
def update_url_query(url, query): ...
def update_Request(req, url: Any | None = ..., data: Any | None = ..., headers=..., query=...): ...
def multipart_encode(data, boundary: Any | None = ...): ...
def dict_get(d, key_or_keys, default: Any | None = ..., skip_false_values: bool = ...): ...
def try_get(src, getter, expected_type: Any | None = ...): ...
def merge_dicts(*dicts): ...
def encode_compat_str(string, encoding=..., errors: str = ...): ...

US_RATINGS: Any
TV_PARENTAL_GUIDELINES: Any

def parse_age_limit(s): ...
def strip_jsonp(code): ...
def js_to_json(code): ...
def qualities(quality_ids): ...

DEFAULT_OUTTMPL: str

def limit_length(s, length): ...
def version_tuple(v): ...
def is_outdated_version(version, limit, assume_new: bool = ...): ...
def ytdl_is_updateable(): ...
def args_to_str(args): ...
def error_to_compat_str(err): ...
def mimetype2ext(mt): ...
def parse_codecs(codecs_str): ...
def urlhandle_detect_ext(url_handle): ...
def encode_data_uri(data, mime_type): ...
def age_restricted(content_limit, age_limit): ...
def is_html(first_bytes): ...
def determine_protocol(info_dict): ...
def render_table(header_row, data): ...
def match_str(filter_str, dct): ...
def match_filter_func(filter_str): ...
def parse_dfxp_time_expr(time_expr): ...
def srt_subtitles_timecode(seconds): ...
def dfxp2srt(dfxp_data): ...
def cli_option(params, command_option, param): ...
def cli_bool_option(params, command_option, param, true_value: str = ..., false_value: str = ..., separator: Any | None = ...): ...
def cli_valueless_option(params, command_option, param, expected_value: bool = ...): ...
def cli_configuration_args(params, param, default=...): ...

class ISO639Utils:
    @classmethod
    def short2long(cls, code): ...
    @classmethod
    def long2short(cls, code): ...

class ISO3166Utils:
    @classmethod
    def short2full(cls, code): ...

class GeoUtils:
    @classmethod
    def random_ipv4(cls, code_or_block): ...

class PerRequestProxyHandler(compat_urllib_request.ProxyHandler):
    def __init__(self, proxies: Any | None = ...): ...
    def proxy_open(self, req, proxy, type): ...

def long_to_bytes(n, blocksize: int = ...): ...
def bytes_to_long(s): ...
def ohdave_rsa_encrypt(data, exponent, modulus): ...
def pkcs1pad(data, length): ...
def encode_base_n(num, n, table: Any | None = ...): ...
def decode_packed_codes(code): ...
def caesar(s, alphabet, shift): ...
def rot47(s): ...
def parse_m3u8_attributes(attrib): ...
def urshift(val, n): ...
def decode_png(png_data): ...
def write_xattr(path, key, value) -> None: ...
def random_birthday(year_field, month_field, day_field): ...
def clean_podcast_url(url): ...
