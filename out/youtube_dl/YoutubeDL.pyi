from .cache import Cache as Cache
from .compat import compat_basestring as compat_basestring, compat_cookiejar as compat_cookiejar, compat_get_terminal_size as compat_get_terminal_size, compat_http_client as compat_http_client, compat_kwargs as compat_kwargs, compat_numeric_types as compat_numeric_types, compat_os_name as compat_os_name, compat_str as compat_str, compat_tokenize_tokenize as compat_tokenize_tokenize, compat_urllib_error as compat_urllib_error, compat_urllib_request as compat_urllib_request, compat_urllib_request_DataHandler as compat_urllib_request_DataHandler
from .downloader import get_suitable_downloader as get_suitable_downloader
from .downloader.rtmp import rtmpdump_version as rtmpdump_version
from .extractor import gen_extractor_classes as gen_extractor_classes, get_info_extractor as get_info_extractor
from .extractor.openload import PhantomJSwrapper as PhantomJSwrapper
from .postprocessor import FFmpegFixupM3u8PP as FFmpegFixupM3u8PP, FFmpegFixupM4aPP as FFmpegFixupM4aPP, FFmpegFixupStretchedPP as FFmpegFixupStretchedPP, FFmpegMergerPP as FFmpegMergerPP, FFmpegPostProcessor as FFmpegPostProcessor, get_postprocessor as get_postprocessor
from .utils import ContentTooShortError as ContentTooShortError, DEFAULT_OUTTMPL as DEFAULT_OUTTMPL, DateRange as DateRange, DownloadError as DownloadError, ExtractorError as ExtractorError, GeoRestrictedError as GeoRestrictedError, ISO3166Utils as ISO3166Utils, MaxDownloadsReached as MaxDownloadsReached, PagedList as PagedList, PerRequestProxyHandler as PerRequestProxyHandler, PostProcessingError as PostProcessingError, SameFileError as SameFileError, UnavailableVideoError as UnavailableVideoError, YoutubeDLCookieJar as YoutubeDLCookieJar, YoutubeDLCookieProcessor as YoutubeDLCookieProcessor, YoutubeDLHandler as YoutubeDLHandler, YoutubeDLRedirectHandler as YoutubeDLRedirectHandler, age_restricted as age_restricted, args_to_str as args_to_str, date_from_str as date_from_str, determine_ext as determine_ext, determine_protocol as determine_protocol, encodeFilename as encodeFilename, encode_compat_str as encode_compat_str, error_to_compat_str as error_to_compat_str, expand_path as expand_path, formatSeconds as formatSeconds, format_bytes as format_bytes, int_or_none as int_or_none, locked_file as locked_file, make_HTTPS_handler as make_HTTPS_handler, orderedSet as orderedSet, parse_filesize as parse_filesize, platform_name as platform_name, preferredencoding as preferredencoding, prepend_extension as prepend_extension, register_socks_protocols as register_socks_protocols, render_table as render_table, replace_extension as replace_extension, sanitize_filename as sanitize_filename, sanitize_path as sanitize_path, sanitize_url as sanitize_url, sanitized_Request as sanitized_Request, std_headers as std_headers, str_or_none as str_or_none, subtitles_filename as subtitles_filename, url_basename as url_basename, version_tuple as version_tuple, write_json_file as write_json_file, write_string as write_string
from typing import Any

class YoutubeDL:
    params: Any
    cache: Any
    def __init__(self, params: Any | None = ..., auto_init: bool = ...): ...
    def warn_if_short_id(self, argv) -> None: ...
    def add_info_extractor(self, ie) -> None: ...
    def get_info_extractor(self, ie_key): ...
    def add_default_info_extractors(self) -> None: ...
    def add_post_processor(self, pp) -> None: ...
    def add_progress_hook(self, ph) -> None: ...
    def to_screen(self, message, skip_eol: bool = ...): ...
    def to_stdout(self, message, skip_eol: bool = ..., check_quiet: bool = ...) -> None: ...
    def to_stderr(self, message) -> None: ...
    def to_console_title(self, message) -> None: ...
    def save_console_title(self) -> None: ...
    def restore_console_title(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    def trouble(self, message: Any | None = ..., tb: Any | None = ...) -> None: ...
    def report_warning(self, message) -> None: ...
    def report_error(self, message, tb: Any | None = ...) -> None: ...
    def report_file_already_downloaded(self, file_name) -> None: ...
    def prepare_filename(self, info_dict): ...
    @staticmethod
    def add_extra_info(info_dict, extra_info) -> None: ...
    def extract_info(self, url, download: bool = ..., ie_key: Any | None = ..., extra_info=..., process: bool = ..., force_generic_extractor: bool = ...): ...
    def add_default_extra_info(self, ie_result, ie, url) -> None: ...
    def process_ie_result(self, ie_result, download: bool = ..., extra_info=...): ...
    tokens: Any
    counter: int
    def build_format_selector(self, format_spec): ...
    def process_video_result(self, info_dict, download: bool = ...): ...
    def process_subtitles(self, video_id, normal_subtitles, automatic_captions): ...
    def process_info(self, info_dict): ...
    def download(self, url_list): ...
    def download_with_info_file(self, info_filename): ...
    @staticmethod
    def filter_requested_info(info_dict): ...
    def post_process(self, filename, ie_info) -> None: ...
    def in_download_archive(self, info_dict): ...
    def record_download_archive(self, info_dict) -> None: ...
    @staticmethod
    def format_resolution(format, default: str = ...): ...
    def list_formats(self, info_dict) -> None: ...
    def list_thumbnails(self, info_dict) -> None: ...
    def list_subtitles(self, video_id, subtitles, name: str = ...) -> None: ...
    def urlopen(self, req): ...
    def print_debug_header(self): ...
    def encode(self, s): ...
    def get_encoding(self): ...
