from . import (
    ImageMode as ImageMode,
    PILLOW_VERSION as PILLOW_VERSION,
    TiffTags as TiffTags,
    UnidentifiedImageError as UnidentifiedImageError,
)
from ._binary import i32le as i32le
from ._util import deferred_error as deferred_error, isPath as isPath
from collections.abc import MutableMapping
from typing import Any

NORMAL: int
SEQUENCE: int
CONTAINER: int
logger: Any

class DecompressionBombWarning(RuntimeWarning): ...
class DecompressionBombError(Exception): ...

MAX_IMAGE_PIXELS: Any
USE_CFFI_ACCESS: Any

def isImageType(t): ...

NONE: int
FLIP_LEFT_RIGHT: int
FLIP_TOP_BOTTOM: int
ROTATE_90: int
ROTATE_180: int
ROTATE_270: int
TRANSPOSE: int
TRANSVERSE: int
AFFINE: int
EXTENT: int
PERSPECTIVE: int
QUAD: int
MESH: int
NEAREST: int
BOX: int
BILINEAR: int
LINEAR: int
HAMMING: int
BICUBIC: int
CUBIC: int
LANCZOS: int
ANTIALIAS: int
ORDERED: int
RASTERIZE: int
FLOYDSTEINBERG: int
WEB: int
ADAPTIVE: int
MEDIANCUT: int
MAXCOVERAGE: int
FASTOCTREE: int
LIBIMAGEQUANT: int
DEFAULT_STRATEGY: Any
FILTERED: Any
HUFFMAN_ONLY: Any
RLE: Any
FIXED: Any
ID: Any
OPEN: Any
MIME: Any
SAVE: Any
SAVE_ALL: Any
EXTENSION: Any
DECODERS: Any
ENCODERS: Any
MODES: Any

def getmodebase(mode): ...
def getmodetype(mode): ...
def getmodebandnames(mode): ...
def getmodebands(mode): ...
def preinit() -> None: ...
def init(): ...
def coerce_e(value): ...

class _E:
    data: Any
    def __init__(self, data) -> None: ...
    def __add__(self, other): ...
    def __mul__(self, other): ...

class Image:
    format: Any
    format_description: Any
    im: Any
    mode: str
    palette: Any
    info: Any
    readonly: int
    pyaccess: Any
    def __init__(self) -> None: ...
    def __getattr__(self, name): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def size(self): ...
    def __enter__(self): ...
    fp: Any
    def __exit__(self, *args) -> None: ...
    map: Any
    def close(self) -> None: ...
    def __eq__(self, other): ...
    def __array__(self, dtype: Any | None = ...): ...
    def tobytes(self, encoder_name: str = ..., *args): ...
    def tobitmap(self, name: str = ...): ...
    def frombytes(self, data, decoder_name: str = ..., *args) -> None: ...
    def load(self): ...
    def verify(self) -> None: ...
    def convert(
        self,
        mode: Any | None = ...,
        matrix: Any | None = ...,
        dither: Any | None = ...,
        palette=...,
        colors: int = ...,
    ): ...
    def quantize(
        self,
        colors: int = ...,
        method: Any | None = ...,
        kmeans: int = ...,
        palette: Any | None = ...,
        dither: int = ...,
    ): ...
    def copy(self): ...
    __copy__: Any
    def crop(self, box: Any | None = ...): ...
    def draft(self, mode, size) -> None: ...
    def filter(self, filter): ...
    def getbands(self): ...
    def getbbox(self): ...
    def getcolors(self, maxcolors: int = ...): ...
    def getdata(self, band: Any | None = ...): ...
    def getextrema(self): ...
    def getexif(self): ...
    def getim(self): ...
    def getpalette(self): ...
    def getpixel(self, xy): ...
    def getprojection(self): ...
    def histogram(self, mask: Any | None = ..., extrema: Any | None = ...): ...
    def entropy(self, mask: Any | None = ..., extrema: Any | None = ...): ...
    def paste(self, im, box: Any | None = ..., mask: Any | None = ...) -> None: ...
    def alpha_composite(self, im, dest=..., source=...) -> None: ...
    def point(self, lut, mode: Any | None = ...): ...
    def putalpha(self, alpha) -> None: ...
    def putdata(self, data, scale: float = ..., offset: float = ...) -> None: ...
    def putpalette(self, data, rawmode: str = ...) -> None: ...
    def putpixel(self, xy, value): ...
    def remap_palette(self, dest_map, source_palette: Any | None = ...): ...
    def resize(
        self,
        size,
        resample: Any | None = ...,
        box: Any | None = ...,
        reducing_gap: Any | None = ...,
    ): ...
    def reduce(self, factor, box: Any | None = ...): ...
    def rotate(
        self,
        angle,
        resample=...,
        expand: int = ...,
        center: Any | None = ...,
        translate: Any | None = ...,
        fillcolor: Any | None = ...,
    ): ...
    encoderinfo: Any
    encoderconfig: Any
    def save(self, fp, format: Any | None = ..., **params) -> None: ...
    def seek(self, frame) -> None: ...
    def show(self, title: Any | None = ..., command: Any | None = ...) -> None: ...
    def split(self): ...
    def getchannel(self, channel): ...
    def tell(self): ...
    def thumbnail(self, size, resample=..., reducing_gap: float = ...): ...
    def transform(
        self,
        size,
        method,
        data: Any | None = ...,
        resample=...,
        fill: int = ...,
        fillcolor: Any | None = ...,
    ): ...
    def transpose(self, method): ...
    def effect_spread(self, distance): ...
    def toqimage(self): ...
    def toqpixmap(self): ...

class ImagePointHandler: ...
class ImageTransformHandler: ...

def new(mode, size, color: int = ...): ...
def frombytes(mode, size, data, decoder_name: str = ..., *args): ...
def frombuffer(mode, size, data, decoder_name: str = ..., *args): ...
def fromarray(obj, mode: Any | None = ...): ...
def fromqimage(im): ...
def fromqpixmap(im): ...
def open(fp, mode: str = ..., formats: Any | None = ...): ...
def alpha_composite(im1, im2): ...
def blend(im1, im2, alpha): ...
def composite(image1, image2, mask): ...
def eval(image, *args): ...
def merge(mode, bands): ...
def register_open(id, factory, accept: Any | None = ...) -> None: ...
def register_mime(id, mimetype) -> None: ...
def register_save(id, driver) -> None: ...
def register_save_all(id, driver) -> None: ...
def register_extension(id, extension) -> None: ...
def register_extensions(id, extensions) -> None: ...
def registered_extensions(): ...
def register_decoder(name, decoder) -> None: ...
def register_encoder(name, encoder) -> None: ...
def effect_mandelbrot(size, extent, quality): ...
def effect_noise(size, sigma): ...
def linear_gradient(mode): ...
def radial_gradient(mode): ...

class Exif(MutableMapping):
    endian: Any
    def __init__(self) -> None: ...
    fp: Any
    head: Any
    def load(self, data) -> None: ...
    def load_from_fp(self, fp, offset: Any | None = ...) -> None: ...
    def tobytes(self, offset: int = ...): ...
    def get_ifd(self, tag): ...
    def __len__(self): ...
    def __getitem__(self, tag): ...
    def __contains__(self, tag): ...
    def __setitem__(self, tag, value) -> None: ...
    def __delitem__(self, tag) -> None: ...
    def __iter__(self): ...
